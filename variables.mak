## this turns off the suffix rules built into make
.SUFFIXES:

## this turns off the RCS / SCCS implicit rules of GNU Make
%: RCS/%,v
%: RCS/%
%: %,v
%: s.%
%: SCCS/s.%

## if a rule fails, delete $@
.DELETE_ON_ERROR:

## compilers ######################################
# Intel Fortran
#FC := ifort
# GFortran
FC := gfortran

ifeq ($(FC),ifort)
  IFORT := yes
else ifeq ($(FC),gfortran)
  GFORTRAN := yes
else
  $(warning * There is no compiler $(FC))
  $(error stopping)
endif

## building type ######################################
# default
DEBUG := yes
PROFILING :=
LIBRARY :=

## system type ######################################
SYSTYPE := $(shell (uname -s) 2>/dev/null)
ifneq (,$(findstring Darwin,$(strip $(SYSTYPE))))
  LINUX := yes # Macos
  DARWIN := yes
else ifneq (,$(findstring Linux,$(strip $(SYSTYPE))))
  LINUX := yes
else
  WIN := yes
endif

## commands ######################################
RM := -rm -f
MOVE := mv
MKDIR := mkdir -p
CHK_DIR_EXISTS := test -d
AR := ar
# script to generate the dependencies
MAKEDEPEND := fort_depend.py

## directories ######################################
BINDIR := .
SRCDIR := src
TMPDIR := tmp
LIBDIR := lib
OBJDIR := obj

VPATH = $(SRCDIR)

# $(DEP_FILE) is a .dep file generated by fort_depend.py
DEP_FILE = $(TMPDIR)/$(PROJECTNAME).dep

## defines ######################################
DEFINES += -DVERBOSE
#DEFINES += -DADDRESS
ifdef LINUX
  DEFINES += -DLINUX
else ## WIN ##
  DEFINES += -DWINDOWS
endif

## compilers ######################################
## For Intel fortran ######################################
ifdef IFORT
  DEFINES += -DIFORT
  ifdef LINUX
    FFLAGS += -fpp -save -zero -module $(OBJDIR) -nologo
    # mkl from http://software.intel.com/en-us/articles/intel-mkl-link-line-advisor
    FFLAGS += -FR -i8 -I$(MKLROOT)/include/intel64/ilp64 -I$(MKLROOT)/include
    FFLAGS += -no-prec-div
    #FFLAGS += -static
    #FFLAGS += -no-ftz
    #FFLAGS += -fp-model precise
    #FFLAGS += -ipo
    #FFLAGS += -xP
    # optimize for Pentium
    #FFLAGS += -tpp7 -ip -xW
    # mkl from http://software.intel.com/en-us/articles/intel-mkl-link-line-advisor
    LDFLAGS += $(MKLROOT)/lib/intel64/libmkl_lapack95_ilp64.a\
               -Wl,--start-group\
               $(MKLROOT)/lib/intel64/libmkl_intel_ilp64.a\
               $(MKLROOT)/lib/intel64/libmkl_sequential.a\
               $(MKLROOT)/lib/intel64/libmkl_core.a\
               -Wl,--end-group\
               -lpthread -lm
    ifdef DEBUG
      FFLAGS += -g -CB -check bounds -traceback -debug inline-debug-info -O0
      # more
      #FFLAGS += -fpe0 -no-ftz -fp-model strict
      ifdef PROFILING
        FFLAGS += -p
        LDFLAGS += -p
      endif
    else ## release ##
      FFLAGS += -O3
    endif
  else ## WIN ##
    FFLAGS += -Qfpp -Qsave -Qzero -module:$(OBJDIR) -nologo
    ifdef DEBUG
      FFLAGS += -check:bounds -debug:full -CB -traceback -Od -optimize:0 -fpe:0
    endif
    LDFLAGS += -nologo
    # TODO
  endif
endif

## gfortran ##
ifdef GFORTRAN
  FFLAGS += -cpp -fno-range-check -J$(OBJDIR)
  #FFLAGS += -ffree-line-length-none -ffixed-line-length-132
  # mkl from http://software.intel.com/en-us/articles/intel-mkl-link-line-advisor
  FFLAGS += -DMKL_ILP64 -fdefault-integer-8 -I${MKLROOT}/include/intel64/ilp64 -m64 -I${MKLROOT}/include
  # mkl from http://software.intel.com/en-us/articles/intel-mkl-link-line-advisor
  LDFLAGS += ${MKLROOT}/lib/libmkl_lapack95_ilp64.a\
             ${MKLROOT}/lib/libmkl_intel_ilp64.a\
             ${MKLROOT}/lib/libmkl_sequential.a\
             ${MKLROOT}/lib/libmkl_core.a\
             -lpthread -lm -ldl
  ifdef DARWIN
    LDFLAGS += -L/usr/local/opt/lapack/lib
    #LDFLAGS += -llapack -lblas
  else ifdef LINUX
    LDFLAGS += -L/usr/lib/x86_64-linux-gnu/lapack -L/usr/lib/x86_64-linux-gnu/blas
  endif
  LDFLAGS += -llapack -lblas
  ifdef DEBUG
    FFLAGS += -g -fbacktrace -fbounds-check
    #FFLAGS += -fcheck=all -ffpe-trap=invalid,zero,overflow
    ifdef PROFILING
      FFLAGS += -pg
      LDFLAGS += -pg
    endif
  else ## release ##
    FFLAGS += -O2
  endif
endif

## trefor ######################################
ifdef LINUX
  TREFOR = -trf -nfs $<
else ## WIN ##
  TREFOR = -trefor.exe $<; $(MOVE) $(patsubst %.trf,%.lst, $<) $(OBJDIR)
endif

## build rules ######################################
FFLAGS += $(DEFINES) $(INCDIRS)
OBJ = $(OBJDIR)/$*.o
ifdef IFORT
  ifdef LINUX
    FFLAGS += -o $(OBJ)
  else ## WIN ##
    FFLAGS += -object:$(OBJ)
  endif
else
  FFLAGS += -o $(OBJ)
endif

## link ######################################
ifdef IFORT
  ifdef LINUX
    LINK = $(FC)
    LDFLAGS += -o $@
  else ## WIN ##
    LINK = "C:\Program Files\Microsoft Visual Studio 8\VC\bin\link.exe"
    LDFLAGS += -out:$@
  endif
else
  LINK = $(FC)
  LDFLAGS += -o $@
endif
